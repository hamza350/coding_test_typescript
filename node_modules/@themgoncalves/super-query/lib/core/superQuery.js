"use strict";

exports.__esModule = true;
exports.default = SuperQuery;

var _styledComponents = require("styled-components");

var _types = require("../types");

function _templateObject() {
  var data = _taggedTemplateLiteralLoose(["\n      ", " {\n        ", "\n      }\n    "]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

function _taggedTemplateLiteralLoose(strings, raw) { if (!raw) { raw = strings.slice(0); } strings.raw = raw; return strings; }

/**
 * @function SuperQuery
 * @module SuperQuery
 * @desc A media-query for styled-component
 * @param {Object} [mediaBreakpoints] Custom breakpoints object to overwrite the default condition.
 * @example <caption>Example of use together with `styled-components`</caption> {@lang javascript}
 * const Title = styled.h1`
 *   color: #666;
 *   font-size: 16px;
 *   // Use with your custom breakpoints directly from `ThemeProvider`
 *   ${props => SuperQuery(props.theme.breakpoints).minWidth.large.css`
 *     font-size: 20px;
 *   `};
 *   // Or directly from an object
 *   ${SuperQuery(myCuystombreakpoints).minWidth.large.css`
 *     font-size: 20px;
 *   `};
 *    // Or use the built-in breakpoints instead
 *   ${SuperQuery().minWidth.lg.and.landscape.css`
 *     font-size: 26px;
 *   `};
 * `;
 * @see initialLogicalOperator
 * @see mediaTypes
 * @see mediaFeature
 * @returns {Object} - With Proper Selectors that match current condition
 * @author Marcos Gon√ßalves <contact@themgoncalves.com>
 * @version 3.0.0
 * @license MIT
 * @requires styled-components
 */
function SuperQuery(mediaBreakpoints) {
  if (mediaBreakpoints === void 0) {
    mediaBreakpoints = _types.defaultBreakpoints;
  }

  if (!(mediaBreakpoints instanceof Object) || !Object.keys(mediaBreakpoints).length) {
    mediaBreakpoints = _types.defaultBreakpoints;
  }

  var MediaQuery = {
    query: '@media ',
    css: function css() {
      return (0, _styledComponents.css)(_templateObject(), this.toString().trim(), _styledComponents.css.apply(void 0, arguments));
    },
    toString: function toString() {
      var result = this.query.replace(/(?:(?:^|\n)\s+|\s+(?:$|\n))/g, '').replace(/\s+/g, ' ');
      this.query = '@media ';
      return result;
    }
  };
  Object.keys(mediaBreakpoints).forEach(function (label) {
    var emUnit = mediaBreakpoints[label] / 16;
    Object.defineProperty(MediaQuery, label, {
      get: function get() {
        this.query += emUnit + "em) ";
        return this;
      }
    });
  });
  Object.keys(_types.screenOrientation).forEach(function (label) {
    Object.defineProperty(MediaQuery, label, {
      get: function get() {
        this.query += "(orientation: " + _types.screenOrientation[label] + ") ";
        return this;
      }
    });
  });
  Object.keys(_types.initialLogicalOperator).forEach(function (label) {
    Object.defineProperty(MediaQuery, label, {
      get: function get() {
        this.query += _types.initialLogicalOperator[label] + " ";
        return this;
      }
    });
  });
  Object.keys(_types.logicalOperator).forEach(function (label) {
    Object.defineProperty(MediaQuery, label, {
      get: function get() {
        this.query = _types.logicalOperator[label] === _types.logicalOperator.or ? "" + this.toString() + _types.logicalOperator[label] + " " : this.query + " " + _types.logicalOperator[label] + " ";
        return this;
      }
    });
  });
  Object.keys(_types.mediaTypes).forEach(function (label) {
    Object.defineProperty(MediaQuery, label, {
      get: function get() {
        this.query += _types.mediaTypes[label] + " ";
        return this;
      }
    });
  });
  Object.keys(_types.mediaFeature).forEach(function (label) {
    Object.defineProperty(MediaQuery, label, {
      get: function get() {
        this.query += "(" + _types.mediaFeature[label] + ": ";
        return this;
      }
    });
  });

  MediaQuery.of = function of(value) {
    if (!value) {
      console.warn('Method "for" cannot be null or undefined. \n\n' + 'See documentation: https://bit.ly/2zaJLrH');
    }

    this.query += value + ") ";
    return this;
  };

  return MediaQuery;
}