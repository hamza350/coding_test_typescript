"use strict";

var _superQuery = _interopRequireDefault(require("../superQuery"));

var _flatSingle = _interopRequireDefault(require("../utils/flatSingle"));

var _removeEmptyEntries = _interopRequireDefault(require("../utils/removeEmptyEntries"));

var _cleanArray = _interopRequireDefault(require("../utils/cleanArray"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _templateObject() {
  var data = _taggedTemplateLiteralLoose(["\n      text-align: center;\n    "]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

function _taggedTemplateLiteralLoose(strings, raw) { if (!raw) { raw = strings.slice(0); } strings.raw = raw; return strings; }

describe('SuperQuery', function () {
  it('should query without media type `all` -> @media (max-width: 100px)', function () {
    var result = (0, _superQuery.default)().maxWidth.of('100px').toString();
    expect(result).toEqual('@media (max-width: 100px)');
  });
  it('should query with media type `all` -> @media (max-width: 100px)', function () {
    var result = (0, _superQuery.default)().all.and.maxWidth.of('100px').toString();
    expect(result).toEqual('@media all and (max-width: 100px)');
  });
  it('should query with orientation `portrait` -> @media (max-width: 100px) and (orientation: portrait)', function () {
    var result = (0, _superQuery.default)().maxWidth.of('100px').and.portrait.toString();
    expect(result).toEqual('@media (max-width: 100px) and (orientation: portrait)');
  });
  it('should query with `or` condition -> @media (width: 100px), (width: 200px)', function () {
    var result = (0, _superQuery.default)().width.of('100px').or.width.of('200px').toString();
    expect(result).toEqual('@media (width: 100px), (width: 200px)');
  });
  it('should query for breakpoint `md` -> @media (max-width: 48em)', function () {
    var result = (0, _superQuery.default)().maxWidth.md.toString();
    expect(result).toEqual('@media (max-width: 48em)');
  });
  it('should query `only` a media type -> @media only screen and (min-width: 769px) and (max-width: 1023px)', function () {
    var result = (0, _superQuery.default)().only.screen.and.minWidth.of('769px').and.maxWidth.of('1023px').toString();
    expect(result).toEqual('@media only screen and (min-width: 769px) and (max-width: 1023px)');
  });
  it('should query complex logic -> @media screen and (device-aspect-ratio: 16/9), screen and (device-aspect-ratio: 16/10)', function () {
    var result = (0, _superQuery.default)().screen.and.deviceAspectRatio.of('16/9').or.screen.and.deviceAspectRatio.of('16/10').toString();
    expect(result).toEqual('@media screen and (device-aspect-ratio: 16/9), screen and (device-aspect-ratio: 16/10)');
  });
  it('should set custom breakpoints', function () {
    var customBreakpoints = {
      extraLarge: 1234
    };
    var result = (0, _superQuery.default)(customBreakpoints).minWidth.extraLarge.toString();
    expect(result).toEqual('@media (min-width: 77.125em)');
  });
  it('should render css', function () {
    var _ref, _ref2, _ref3;

    var result = (_ref = (_ref2 = (_ref3 = (0, _superQuery.default)().maxWidth.md.css(_templateObject()), (0, _flatSingle.default)(_ref3)), (0, _removeEmptyEntries.default)(_ref2)), (0, _cleanArray.default)(_ref));
    var expectedOutput = '@media (max-width: 48em), { , text-align: center; , }';
    expect(result).toEqual(expectedOutput);
  });
});