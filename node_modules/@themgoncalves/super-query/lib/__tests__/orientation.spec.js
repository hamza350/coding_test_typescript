"use strict";

var _orientation = _interopRequireDefault(require("../core/orientation"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('Orientation', function () {
  it('Should return a array of object', function () {
    var options = {
      current: jest.fn(),
      isLocked: jest.fn(),
      lock: jest.fn(),
      onChange: jest.fn(),
      unlock: jest.fn()
    };
    Object.keys(options).forEach(function (key) {
      expect(_orientation.default).toHaveProperty(key);
    });
  });
  it('Should return default orientation -> portrait-primary', function () {
    expect(_orientation.default.current()).toEqual('portrait-primary');
  });
  it('Should not be locked', function () {
    expect(_orientation.default.isLocked()).toBeFalsy();
  });
  it('Should return false when attempt to lock the orientation', function () {
    expect(_orientation.default.lock('landscape-primary')).toBeFalsy();
  });
  it('Should return false when attempt to unlock the orientation', function () {
    expect(_orientation.default.unlock()).toBeFalsy();
  });
  it('Should trigger callback function when orientation has changed', function () {
    var map = {};
    window.addEventListener = jest.fn(function (event, cb) {
      map[event] = cb;
    });
    var callback = jest.fn();

    _orientation.default.onChange(callback);

    map.orientationchange();
    expect(callback).toHaveBeenCalled();
  });
  it('Should trigger callback function when orientation has changed', function () {
    var map = {};
    window.addEventListener = jest.fn(function (event, cb) {
      map[event] = cb;
    });
    var callback = jest.fn();

    _orientation.default.onChange(callback);

    map.orientationchange();
    expect(callback).toHaveBeenCalled();
  });
});